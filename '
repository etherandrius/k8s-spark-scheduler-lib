package v1alpha1

import (
	"github.com/palantir/k8s-spark-scheduler-lib/pkg/apis/scaler/v1alpha2"
	v1 "k8s.io/api/core/v1"
	"sigs.k8s.io/controller-runtime/pkg/conversion"
)


func (src *Demand) ConvertTo(dstRaw conversion.Hub) error {
	dst := dstRaw.(*v1alpha2.Demand)

	
	dst.Status.LastTransitionTime = src.Status.LastTransitionTime
	dst.Status.Phase = src.Status.Phase
	dst.Spec.InstanceGroup = src.Spec.InstanceGroup
	dst.Spec.IsLongLived = src.Spec.IsLongLived

	dstUnits := make([]v1alpha2.DemandUnit, 0, len(src.Spec.Units))
	for _, u := range src.Spec.Units {
		dstUnits = append(dstUnits, v1alpha2.DemandUnit{
			Resources: v1.ResourceList{
				v1.ResourceCPU: u.CPU,
				v1.ResourceMemory: u.Memory,
			},
			Count: u.Count,
		})
	}
	dst.Spec.Units = dstUnits
	
	return nil
}


func (dst *Demand) ConvertFrom(srcRaw conversion.Hub) error {
	src := srcRaw.(*v1alpha2.Demand)

	
	dst.Status.LastTransitionTime = src.Status.LastTransitionTime
	dst.Status.Phase = src.Status.Phase
	dst.Spec.InstanceGroup = src.Spec.InstanceGroup
	dst.Spec.IsLongLived = src.Spec.IsLongLived


	dstUnits := make([]DemandUnit, 0, len(src.Spec.Units))
	for _, u := range src.Spec.Units {
		demandUnit := DemandUnit{
			Count: u.Count,
		}
		for name, value := range u.Resources {
			switch name {
				case v1.ResourceCPU: 
					demandUnit.CPU = value
				case v1.ResourceMemory: 
					demandUnit.Memory = value
				default:
					return 
			}
		}

		dstUnits = append(dstUnits, demandUnit)
	}


	return nil
}


